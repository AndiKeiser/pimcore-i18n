<?php

namespace I18nBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder();
        $rootNode = $treeBuilder->root('i18n');

        $rootNode
            ->children()
                ->enumNode('mode')
                    ->values(['country', 'language'])
                    ->isRequired()
                    ->info('')
                ->end()
                ->scalarNode('country_adapter')
                    ->isRequired()
                    ->info('')
                ->end()
                ->scalarNode('language_adapter')
                    ->isRequired()
                    ->info('')
                    ->validate()
                        ->ifTrue(function ($v) {return empty($v);})
                        ->thenInvalid('you must define a language adapter')
                    ->end()
                ->end()
                ->scalarNode('default_language')
                    ->defaultValue(NULL)
                    ->info('')
                ->end()
                ->scalarNode('default_country')
                    ->defaultValue(NULL)
                    ->info('')
                ->end()
                ->arrayNode('translations')
                    ->isRequired()
                    ->info('')
                    ->prototype('array')
                        ->children()
                            ->scalarNode('key')->end()
                            ->variableNode('values')->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('zones')
                    ->useAttributeAsKey('identifier')
                    ->prototype('array')
                        ->children()
                            ->integerNode('id')->isRequired()->end()
                            ->scalarNode('name')->end()
                            ->arrayNode('domains')
                                ->prototype('scalar')->end()
                            ->end()
                            ->arrayNode('config')
                                ->children()
                                    ->enumNode('mode')
                                        ->values(['country', 'language'])
                                        ->isRequired()
                                    ->end()
                                    ->scalarNode('country_adapter')
                                        ->isRequired()
                                    ->end()
                                    ->scalarNode('language_adapter')
                                        ->isRequired()
                                        ->info('')
                                        ->validate()
                                            ->ifTrue(function ($v) {return empty($v);})
                                            ->thenInvalid('you must define a language adapter')
                                        ->end()
                                    ->end()
                                    ->scalarNode('default_language')
                                        ->defaultValue(NULL)
                                        ->info('')
                                    ->end()
                                    ->scalarNode('default_country')
                                        ->defaultValue(NULL)
                                        ->info('')
                                    ->end()
                                    ->arrayNode('translations')
                                        ->isRequired()
                                        ->info('')
                                        ->prototype('array')
                                            ->children()
                                                ->scalarNode('key')->end()
                                                ->variableNode('values')->end()
                                            ->end()
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->validate()
                            ->ifTrue(function($v) { return $v['enabled'] === FALSE; })->thenUnset()
                        ->end()
                        ->canBeUnset()
                        ->canBeDisabled()
                        ->treatNullLike(['enabled' => FALSE])
                    ->end()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}